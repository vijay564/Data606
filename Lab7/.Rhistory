inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
I<- A%*%B
(I<- A%*%B)
round(I<- A%*%B,0)
#
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
#
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
round(I<- A%*%B,0)
else
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
I<- A%*%B
(I<- A%*%B)
round(I,0)
round(I,2)
(I<- A%*%B)
round(I,2)
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
(X <-(A)%*%t(A))
(Y<- t(A)%*%(A))
# COMPUTING EIGEN VALUES AND EIGEN VECTORS OF 'X' AND 'Y' :
(E_X <- eigen(X))
(E_Y<- eigen(Y))
# COMPUTE LEFT SINGULAR, SINGULAR, RIGHT SINGULAR OF 'A' USING "SVD" FUNCTION :
(left_singular_A <- svd(A)$u)
(singular_A <- svd(A)$d)
(right_singular_A <- svd(A)$v)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
exp(-5)
(lambda <- 10000/2000)
exp(-5)
n = 100
p = 0.5
q = 1 - p
var = n*p*q
sd = sqrt(var)
1 - pnorm(10, mean = 0, sd = sd)
n <- 100
p <-  0.5
q <- 1 - p
variance <- n*p*q
SD <-  sqrt(variance)
1 - pnorm(10, mean = 0, sd = SD)
knitr::opts_chunk$set(echo = TRUE)
1 - pnorm(100,100,91)
# normal plot
normalplot(mean = 100, sd = 91, c(100,Inf))
setwd("E:/github/MS/DATA605")
1 - pnorm(100,100,91)
# normal plot
normalplot(mean = 100, sd = 91, c(100,Inf))
1 - pnorm(100,100,91)
# normal plot
normalplot(100,91, c(100,Inf))
setwd("E:/github/MS/DATA606/Data606")
1 - pnorm(100,100,91)
# normal plot
normalplot(100,91, c(100,Inf))
setwd("E:/github/MS/DATA605")
1 - pnorm(100,100,91)
# normal plot
normalplot(100,91, c(100,Inf))
1 - pnorm(100,100,91)
1 - pnorm(110,100,91)
1 - pnorm(120,100,91)
1 - pnorm(100,100,91)
normalPlot(100,91,c(110,Inf))
1 - pnorm(100,100,91)
knitr::opts_chunk$set(echo = TRUE)
# Sample Mean
(Mean <- (65 + 77) / 2)
# Margin or Error
(ME <- 77-71)
# Sample Mean
(Mean <- (65 + 77) / 2)
# Margin or Error
(ME <- 77-71)
# Calculate the T-score
t <- qt(.05, df=24)
# Standard deviation
Sd <- ME/t * sqrt(25)
# Sample Mean
(Mean <- (65 + 77) / 2)
# Margin or Error
(ME <- 77-71)
# Calculate the T-score
t <- qt(.05, df=24)
# Standard deviation
(Sd <- ME/t * sqrt(25))
anova548 <- data.frame(
names <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(anova548) <- c("names","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
knitr::kable(anova548)
anova548 <- data.frame(
names <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(anova548) <- c("names","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
anova548 <- data.frame(
names <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(anova548) <- c("names","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
Data606 <- data.frame(
names <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(Data606) <- c("names","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
knitr::kable(Data606)
Data606 <- data.frame(
heading <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(Data606) <- c("names","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
knitr::kable(Data606)
Data606 <- data.frame(
heading <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(Data606) <- c("names","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
knitr::kable(Data606)
Data606 <- data.frame(
heading <- c("degree","Residuals","Total"),
Df <- c("4","1167","1171"),
SumSq <- c("2004.1","267382","269386.1"),
MeanSq <- c("501.54","229.13",""),
Fvalue <- c("2.19","",""),
prf <- c("0.0682","","")
)
colnames(Data606) <- c("heading","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
knitr::kable(Data606)
z_score <- 1.65
ME <- 25
sd <- 250
(sample_size <- ((z_score * sd) / ME) ^2)
z <- qnorm(.995, mean = 0, sd = 1)
Sample_size <- ((z^2) / (25^2)) * 250^2
round(Sample_size)
# Calculating T scores
SE <- 8.887/sqrt(200)
t = (-0.545-0)/SE
# P- value
p = pt(q=t, df=199, lower.tail = TRUE)
2 * p
auto_mu <- 16.12
auto_sd <- 3.58
man_mu <- 19.85
man_sd <- 4.51
n <- 26
diff <- man_mu - auto_mu
se <- sqrt((auto_sd^2/n) + (man_sd^2/n))
t <- (diff - 0)/se
(p = pt(t, n-1, lower.tail = FALSE))
s = 2.2
mu = 0
delta = 0.5
ns = 10:1000
power = rep(NA, length(ns))
for(i in 10:1000){
n = i
t_star = qt(0.95, df = n-1)
se = sqrt((s^2 / n) + (s^2 / n))
cutoff = t_star * se
t_cutoff = (cutoff - (mu+delta)) / se
power[i-9] = pt(t_cutoff, df = n-1, lower.tail = FALSE)
}
which_n = which.min(abs(power - 0.9))
power[which_n]
power[which_n + 1]
ns[which_n + 1]
s = 2.2
mu = 0
delta = 0.5
ns = 10:1000
power = rep(NA, length(ns))
for(i in 10:1000){
n = i
t_star = qt(0.95, df = n-1)
se = sqrt((s^2 / n) + (s^2 / n))
cutoff = t_star * se
t_cutoff = (cutoff - (mu+delta)) / se
power[i-9] = pt(t_cutoff, df = n-1, lower.tail = FALSE)
}
which_n = which.min(abs(power - 0.8))
power[which_n]
power[which_n + 1]
ns[which_n + 1]
s = 2.2
mu = 0
delta = 0.5
ns = 10:1000
power = rep(NA, length(ns))
for(i in 10:1000){
n = i
t_star = qt(0.95, df = n-1)
se = sqrt((s^2 / n) + (s^2 / n))
cutoff = t_star * se
t_cutoff = (cutoff - (mu+delta)) / se
power[i-9] = pt(t_cutoff, df = n-1, lower.tail = FALSE)
}
which_n = which.min(abs(power - 0.8))
power[which_n]
power[which_n + 1]
ns[which_n + 1]
s = 2.2
mu = 0
delta = 0.5
ns = 10:1000
power = rep(NA, length(ns))
for(i in 10:1000){
n = i
t_star = qt(0.95, df = n-1)
se = sqrt((s^2 / n) + (s^2 / n))
cutoff = t_star * se
t_cutoff = (cutoff - (mu+delta)) / se
power[i-8] = pt(t_cutoff, df = n-1, lower.tail = FALSE)
}
which_n = which.min(abs(power - 0.8))
power[which_n]
power[which_n + 1]
ns[which_n + 1]
s = 2.2
mu = 0
delta = 0.5
ns = 10:1000
power = rep(NA, length(ns))
for(i in 10:1000){
n = i
t_star = qt(0.95, df = n-1)
se = sqrt((s^2 / n) + (s^2 / n))
cutoff = t_star * se
t_cutoff = (cutoff - (mu+delta)) / se
power[i-8] = pt(t_cutoff, df = n-1, lower.tail = FALSE)
}
which_n = which.min(abs(power - 0.8))
power[which_n]
power[which_n + 1]
ns[which_n + 1]
setwd("E:/github/MS/DATA606/Data606")
library(DATA606)
startLab('Lab7')
nrow(nc)
load("more/nc.RData")
summary(nc)
nrow(nc)
boxplot(weight~habit,data=nc, main="Mother's Habit vs. Baby's Weight", ylab="Weight", xlab="Habit")
setwd("E:/github/MS/DATA606/Data606/Lab7")
by(nc$weight, nc$habit, length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,  alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", method = "theoretical", conflevel = .9)
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ht", null = 0, alternative = "twosided",  method = "theoretical")
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ht", null = 0, alternative = "twosided",  method = "theoretical")
by(nc$mage, nc$mature, range)
by(nc$mage, nc$mature, range)
