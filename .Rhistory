}#if
else{
print("Invalid Input")
}
return(invM)
myinverse <- function(M){
if(is.matrix(M) & nrow(M) == ncol(M) & det(M) != 0){
print("CalCULATING INVERSE OF MATRIX")
detM <- det(M)
C <- matrix(0, nrow = nrow(M), ncol = ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[j,i] = (-1)^(i+j)*det(M[-i,-j])
}
}
invM = C/detM
}#if
else{
print("Invalid Input")
}
return(invM)
}
myinverse <- function(M){
if(is.matrix(M) & nrow(M) == ncol(M) & det(M) != 0){
print("CalCULATING INVERSE OF MATRIX")
detM <- det(M)
C <- matrix(0, nrow = nrow(M), ncol = ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[j,i] = (-1)^(i+j)*det(M[-i,-j])
}
}
invM = C/detM
}#if
else{
print("Invalid Input")
}
return(invM)
}
(A <- matrix(c(3, 2, 0, 0, 9, 1, 2, -2,8), 3,3))
(B<- myinverse(A))
myinverse <- function(V){
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
detV <- det(V)
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}#if
else{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(3, 2, 0, 0, 9, 1, 2, -2,8), 3,3))
(B<- myinverse(A))
else{
print("Invalid Input")
}
{
print("Invalid Input")
}
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
detV <- det(V)
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}else
{
print("Invalid Input")
}
return(inverse)
}
{
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}else
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0)
{
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}else
{
print("Invalid Input")
}
return(inverse)
}
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(3, 2, 0, 0, 9, 1, 2, -2), 3,3))
(A <- matrix(c(3,2,0,0,9,4), 3,2))
(B<- myinverse(A))
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
I<- A%*%B
(I<- A%*%B)
round(I<- A%*%B,0)
#
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
#
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
round(I<- A%*%B,0)
else
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
I<- A%*%B
(I<- A%*%B)
round(I,0)
round(I,2)
(I<- A%*%B)
round(I,2)
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
(X <-(A)%*%t(A))
(Y<- t(A)%*%(A))
# COMPUTING EIGEN VALUES AND EIGEN VECTORS OF 'X' AND 'Y' :
(E_X <- eigen(X))
(E_Y<- eigen(Y))
# COMPUTE LEFT SINGULAR, SINGULAR, RIGHT SINGULAR OF 'A' USING "SVD" FUNCTION :
(left_singular_A <- svd(A)$u)
(singular_A <- svd(A)$d)
(right_singular_A <- svd(A)$v)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
exp(-5)
(lambda <- 10000/2000)
exp(-5)
setwd("E:/github/MS/DATA606/Data606")
knitr::opts_chunk$set(echo = TRUE)
medsal <- cbind(all_ages_df$Median, recent_grad_df$Median, grad_df$Grad_median)
medsal <- cbind(all_ages_df$Median, recent_grad_df$Median, grad_df$Grad_median)
medsal <- cbind(all_ages_df$Median, recent_grad_df$Median, grad_df$Grad_median)
library(tidyr)
library(dplyr)
library(psych)
library(stringr)
setwd("E:/github/MS/DATA606/Data606")
library(tidyr)
library(dplyr)
library(psych)
library(stringr)
all_ages_df <-  read.csv(file = "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/all-ages.csv", header= TRUE)
names(all_ages_df)
all_ages_df_eng <- all_ages_df %>% filter(Major_category == "Engineering")
head(all_ages_df_eng)
grad_df <-  read.csv(file = "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/grad-students.csv", header= TRUE)
names(grad_df)
grad_df_eng <- grad_df %>% filter(Major_category == "Engineering")
head(grad_df_eng)
recent_grad_df <-  read.csv(file = "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/recent-grads.csv", header= TRUE)
names(recent_grad_df)
recent_grad_df_eng <- recent_grad_df %>% filter(Major_category == "Engineering")
head(recent_grad_df_eng)
summary(all_ages_df$Unemployment_rate)
summary(grad_df$Grad_unemployment_rate)
summary(recent_grad_df$Unemployment_rate)
unempl <- cbind(all_ages_df$Unemployment_rate, recent_grad_df$Unemployment_rate, grad_df$Grad_unemployment_rate)
barplot(unempl/nrow(unempl), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Unemployment Rate", col = rainbow(nrow(unempl)))
summary(all_ages_df$Median)
hist(all_ages_df$Median, main = "Hist for Median Income All Ages", xlab = "Median Income by Major All Ages", col = "dark violet")
summary(grad_df$Grad_median)
hist(grad_df$Grad_median, main = "Hist for Median Income Grd Students", xlab = "Median Income by Major Grad Student", col = "yellow")
summary(recent_grad_df$Median)
hist(recent_grad_df$Median, main = "Hist for Median Income Recent Grds", xlab = "Median Income by Major Recent Grads", col = "orange")
medsal <- cbind(all_ages_df$Median, recent_grad_df$Median, grad_df$Grad_median)
boxplot(medsal/nrow(medsal), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Median Salary")
library(tidyr)
library(dplyr)
library(psych)
library(stringr)
library(tidyr)
library(dplyr)
library(psych)
library(stringr)
all_ages_df <-  read.csv(file = "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/all-ages.csv", header= TRUE)
names(all_ages_df)
all_ages_df_eng <- all_ages_df %>% filter(Major_category == "Engineering")
head(all_ages_df_eng)
grad_df <-  read.csv(file = "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/grad-students.csv", header= TRUE)
names(grad_df)
grad_df_eng <- grad_df %>% filter(Major_category == "Engineering")
head(grad_df_eng)
recent_grad_df <-  read.csv(file = "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/recent-grads.csv", header= TRUE)
names(recent_grad_df)
recent_grad_df_eng <- recent_grad_df %>% filter(Major_category == "Engineering")
head(recent_grad_df_eng)
summary(all_ages_df$Unemployment_rate)
summary(grad_df$Grad_unemployment_rate)
summary(recent_grad_df$Unemployment_rate)
unempl <- cbind(all_ages_df$Unemployment_rate, recent_grad_df$Unemployment_rate, grad_df$Grad_unemployment_rate)
barplot(unempl/nrow(unempl), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Unemployment Rate", col = rainbow(nrow(unempl)))
summary(all_ages_df$Median)
hist(all_ages_df$Median, main = "Hist for Median Income All Ages", xlab = "Median Income by Major All Ages", col = "dark violet")
summary(grad_df$Grad_median)
hist(grad_df$Grad_median, main = "Hist for Median Income Grd Students", xlab = "Median Income by Major Grad Student", col = "yellow")
summary(recent_grad_df$Median)
hist(recent_grad_df$Median, main = "Hist for Median Income Recent Grds", xlab = "Median Income by Major Recent Grads", col = "orange")
medsal <- cbind(all_ages_df$Median, recent_grad_df$Median, grad_df$Grad_median)
barplot(medsal/nrow(medsal), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Median Salary")
summary(all_ages_df$Unemployment_rate)
summary(grad_df$Grad_unemployment_rate)
summary(recent_grad_df$Unemployment_rate)
summary(all_ages_df$Unemployment_rate)
summary(grad_df$Grad_unemployment_rate)
summary(recent_grad_df$Unemployment_rate)
# Use barplot to figure out what observation we can get
unempl <- cbind(all_ages_df$Unemployment_rate, recent_grad_df$Unemployment_rate, grad_df$Grad_unemployment_rate)
barplot(unempl/nrow(unempl), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Unemployment Rate", col = rainbow(nrow(unempl)))
summary(all_ages_df$Median)
hist(all_ages_df$Median, main = "Hist for Median Income All Ages", xlab = "Median Income by Major All Ages", col = "dark violet")
summary(grad_df$Grad_median)
hist(grad_df$Grad_median, main = "Hist for Median Income Grd Students", xlab = "Median Income by Major Grad Student", col = "yellow")
summary(recent_grad_df$Median)
hist(recent_grad_df$Median, main = "Hist for Median Income Recent Grds", xlab = "Median Income by Major Recent Grads", col = "orange")
medsal <- cbind(all_ages_df$Median, recent_grad_df$Median, grad_df$Grad_median)
barplot(medsal/nrow(medsal), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Median Salary")
setwd("E:/github/MS/DATA606/Data606")
summary(all_ages_df$Unemployment_rate)
summary(grad_df$Grad_unemployment_rate)
summary(recent_grad_df$Unemployment_rate)
# Use barplot to figure out what observation we can get
unempl <- cbind(all_ages_df$Unemployment_rate, recent_grad_df$Unemployment_rate, grad_df$Grad_unemployment_rate)
barplot(unempl/nrow(unempl), names.arg = c("All", "Recent Grad", "Grad Student"), xlab = "Unemployment Rate", col = rainbow(nrow(unempl)))
