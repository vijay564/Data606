ggplot(model, aes(.fitted, .resid)) + geom_point(color = "red", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
qqnorm(resid(model))
qqline(resid(model))
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "orange", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
qqnorm(resid(model))
qqline(resid(model))
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "green", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
qqnorm(resid(model))
qqline(resid(model))
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
qqnorm(resid(model))
qqline(resid(model))
qplot(model, ylab="weight", xlab="height", main="height vs weight", ymin=-10) + geom_abline(intercept = model$coefficients[1],  slope = model$coefficients[2])
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
library(ggplot2)
library(dplyr)
input  <- mtcars[,c("mpg","disp","hp","wt")]
print(head(input))
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(disp,mpg, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(data = input, aes(x1 = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)+xlim(150,300)
ggplot(data = input, aes(x = disp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = input, aes(x = hp, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = input, aes(x = wt, y = mpg)) +
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor1
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor2
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor3
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
plot(model)
# plot between reponse and predictor1
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor2
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor3
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor1
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor2
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor3
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
plot(model)
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
qqnorm(resid(model))
qqline(resid(model))
plot(model)
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# residual plot
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# all plots
plot(model)
# plot between reponse and predictor1
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor2
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor3
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
summary(model)
# residual plot
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# all plots
qqplot(model)
# residual plot
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(model))
qqline(resid(model))
library(ggplot2)
library(dplyr)
input  <- mtcars[,c("mpg","disp","hp","wt")]
print((input))
library(ggplot2)
library(dplyr)
input  <- mtcars[,c("mpg","disp","hp","wt")]
print(input)
# Create the relationship model.
model <- lm(mpg~disp+hp+wt, data = input)
# Show the model.
print(model)
# plot between reponse and predictor1
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor2
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor3
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# residual plot
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(model))
qqline(resid(model))
setwd("E:/github/MS/DATA606/Data606")
knitr::opts_chunk$set(echo = TRUE)
smokers <- 123.05-8.94(1)
smokers <- 123.05-8.94*(1)
nonsmokers <- 123.05-8.94*(0)
(smokers <- 123.05-8.94*(1))
(nonsmokers <- 123.05-8.94*(0))
Absent <- 18.93 - 9.11 * (0) + 3.10 * (1) + 2.15 * (1)
(Residual <- 2 - Absent)
Absent <- 18.93 - 9.11 * (0) + 3.10 * (1) + 2.15 * (1)
(Residual <- Absent-2)
var_res <- 240.57
var_num <- 264.17
n <- 146
(R2 <- 1 - (var_res / var_num))
var_res <- 240.57
var_num <- 264.17
n <- 146
(R2 <- 1 - (var_res / var_num))
(R2_adjusted <- 1 - (var_residual/var_outcome) * ((n-1)/(n-k-1)))
var_res <- 240.57
var_num <- 264.17
n <- 146
(R2 <- 1 - (var_res / var_num))
(R2_adjusted <- 1 - (var_res/var_num) * ((n-1)/(n-k-1)))
var_res <- 240.57
var_num <- 264.17
n <- 146
k <- 3
(R2 <- 1 - (var_res / var_num))
(R2_adjusted <- 1 - (var_res/var_num) * ((n-1)/(n-k-1)))
p <- function(temp)
{
phat <- exp(11.6630 - 0.2162 * temp) / (1 + exp(11.6630 - 0.2162 * temp))
return (round(phat,3))
}
p(51)
p(53)
p(55)
ggplot(ShuttleMission,aes(x=temperature,y=damaged)) + geom_point() +
stat_smooth(method = 'glm', family = 'binomial')
library(ggplot2)
ggplot(ShuttleMission,aes(x=temperature,y=damaged)) + geom_point() +
stat_smooth(method = 'glm', family = 'binomial')
library(ggplot2)
plot(prob$temp, prob$prob, xlab = "Temperature", ylab = "Probability of Damage")
plot(prob$temp, prob$prob, xlab = "Temperature", ylab = "Probability of Damage")
setwd("E:/github/MS/DATA606/Data606")
temps <- seq(from = 51, to = 81)
predicted_prob <- exp(11.6630-(0.2162*temps))/(1+exp(11.6630-(0.2162*temps)))
dtemp <- as.data.frame(cbind(temps, predicted_prob))
plot(dtemp$temps, dtemp$predicted_prob,col = "red")
temps <- seq(from = 51, to = 81)
predicted_prob <- exp(11.6630-(0.2162*temps))/(1+exp(11.6630-(0.2162*temps)))
dtemp <- as.data.frame(cbind(temps, predicted_prob))
plot(dtemp$temps, dtemp$predicted_prob,col = "blue")
library(ggplot2)
prob <- data.frame(shuttle=seq(1:23),
temperature=c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,81),
damaged=c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0),
undamaged=c(c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)))
prob$rating <- prob$damaged / (prob$damaged + prob$undamaged)
ggplot(prob,aes(x=temperature,y=damaged)) + geom_point() +  stat_smooth(method = 'glm', family ='binomial')
library(ggplot2)
prob <- data.frame(shuttle=seq(1:23),temperature=c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,81),damaged=c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0),undamaged=c(c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)))
prob$rating <- prob$damaged / (prob$damaged + prob$undamaged)
ggplot(prob,aes(x=temperature,y=damaged)) + geom_point() +  stat_smooth(method = 'glm', family ='binomial')
library(ggplot2)
prob <- data.frame(shuttle=seq(1:23),temperature=c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,81),damaged=c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0),undamaged=c(c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)))
(prob$rating <- prob$damaged / (prob$damaged + prob$undamaged))
ggplot(prob,aes(x=temperature,y=damaged)) + geom_point() +  stat_smooth(method = 'glm', family ='binomial')
library(ggplot2)
prob <- data.frame(shuttle=seq(1:23),temperature=c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,81),damaged=c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0),undamaged=c(c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)))
prob$rating <- prob$damaged / (prob$damaged + prob$undamaged)
ggplot(prob,aes(x=temperature,y=damaged)) + geom_point() +  stat_smooth(method = 'glm')
library(ggplot2)
prob <- data.frame(shuttle=seq(1:23),temperature=c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,81),damaged=c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0),undamaged=c(c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)))
ggplot(prob,aes(x=temperature,y=damaged)) + geom_point() +  stat_smooth(method = 'glm')
setwd("E:/github/MS/DATA605")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
WHO <- read.csv(who.csv,header = TRUE, sep = ",")
library(ggplot2)
library(dplyr)
WHO <- read.csv(file = "who.csv",header = TRUE, sep = ",")
library(ggplot2)
library(dplyr)
who <-  data.frame(read.csv("who.csv"))
setwd("E:/github/MS/DATA605")
setwd("E:/github/MS/DATA605")
library(ggplot2)
library(dplyr)
who <- read.csv("who.csv")
head(who)
m1 = lm(LifeExp ~ TotExp, data=who)
summary(m1)
m1 = lm(LifeExp ~ TotExp, data=who)
summary(m1)
# linear regression
ggplot(who_df, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) +labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
library(ggplot2)
library(dplyr)
who <- read.csv("who.csv")
head(who)
m1 = lm(LifeExp ~ TotExp, data=who)
summary(m1)
# linear regression
ggplot(who_df, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4)))+labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
m1 = lm(LifeExp ~ TotExp, data=who)
summary(m1)
# linear regression
ggplot(who_df, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
m1 = lm(LifeExp ~ TotExp, data=who)
summary(m1)
# linear regression
ggplot(who, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
ggplot(m1, aes(.fitted, .resid)) +  geom_point(color = "blue", size=2) + labs(title = "Fitted Values vs Residuals") +
labs(x = "Fitted Values") + labs(y = "Residuals")
ggplot(m1, aes(.fitted, .resid)) +  geom_point(color = "blue", size=2) + labs(title = "Fitted Values vs Residuals") +
labs(x = "Fitted Values") + labs(y = "Residuals")
abline(m1)
# residual plot
ggplot(m1, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(model))
qqline(resid(model))
# residual plot
ggplot(m1, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(m1))
qqline(resid(m1))
m1 = lm(LifeExp ~ TotExp, data=who)
# linear regression
ggplot(who, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
# residual plot
ggplot(m1, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(m1))
qqline(resid(m1))
summary(m1)
m1 = lm(LifeExp ~ TotExp, data=who)
# linear regression
ggplot(who, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
lifeexp2 <- who$LifeExp^4.6
Totexp2 <- who$TotExp^0.06
m2 <- lm(life4.6 ~ texp)
lifeexp2 <- who$LifeExp^4.6
Totexp2 <- who$TotExp^0.06
m2 <- lm(lifeexp2 ~ Totexp2)
summary(m2)
lifeexp2 <- who$LifeExp^4.6
Totexp2 <- who$TotExp^0.06
m2 <- lm(lifeexp2 ~ Totexp2)
summary(m2)
m1 = lm(LifeExp ~ TotExp, data=who)
# linear regression
ggplot(who, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
lifeexp2 <- who$LifeExp^4.6
Totexp2 <- who$TotExp^0.06
m2 <- lm(lifeexp2 ~ Totexp2)
# linear regression
ggplot(m2, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Transformed") + xlab("Total Expenditures") + ylab("Life Expectancy")
lifeexp2 <- who$LifeExp^4.6
Totexp2 <- who$TotExp^0.06
m2 <- lm(lifeexp2 ~ Totexp2)
# linear regression
ggplot(m2, aes(Totexp2,lifeexp2)) + geom_point(colour="green", size=2) + geom_abline(aes(slope=round(m2$coefficients[2], 4), intercept=round(m2$coefficients[1], 4))) + labs(title = "Transformed") + xlab("Total Expenditures") + ylab("Life Expectancy")
# residual plot
ggplot(m2, aes(.fitted, .resid)) + geom_point(color = "red", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(m1))
qqline(resid(m1))
# residual plot
ggplot(m2, aes(.fitted, .resid)) + geom_point(color = "red", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(m2))
qqline(resid(m2))
summary(m2)
life_exp <- function(fc)
{   y <- -736527910 + 620060216 * (fc)
y <- y^(1/4.6)
print(y)
}
#Life expectancy when TotExp^.06 =1.5
life_exp(1.5)
#Life expectancy when TotExp^.06 =2.5
life_exp(2.5)
life_exp <- function(x)
{   y <- -736527910 + 620060216 * (x)
y <- y^(1/4.6)
print(y)
}
#Life expectancy when TotExp^.06 =1.5
life_exp(1.5)
#Life expectancy when TotExp^.06 =2.5
life_exp(2.5)
summary(m1)
m3 = lm(LifeExp ~ PropMD + TotExp + PropMD*TotExp, data = who_df)
m3 = lm(LifeExp ~ PropMD + TotExp + PropMD*TotExp, data = who)
summary(m3)
summary(m3)
m1 = lm(LifeExp ~ TotExp, data=who)
# linear regression
ggplot(m1, aes(TotExp, LifeExp)) + geom_point(colour="blue", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
m3 = lm(LifeExp ~ PropMD + TotExp + PropMD*TotExp, data = who)
# linear regression
ggplot(m2, aes(TotExp, LifeExp)) + geom_point(colour="orange", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
m3 = lm(LifeExp ~ PropMD + TotExp + PropMD*TotExp, data = who)
# linear regression
ggplot(m3, aes(TotExp, LifeExp)) + geom_point(colour="orange", size=2) + geom_abline(aes(slope=round(m1$coefficients[2], 4), intercept=round(m1$coefficients[1], 4))) + labs(title = "Total Expenditures vs. Life Expetancy") + xlab("Total Expenditures") + ylab("Life Expectancy")
# residual plot
ggplot(m3, aes(.fitted, .resid)) + geom_point(color = "red", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(m3))
qqline(resid(m3))
summary(m3)
summary(lm_3)$coefficients[1] + .03* summary(lm_3)$coefficients[2] + 14*summary(lm_3)$coefficients[3] + (.03*14)*summary(lm_3)$coefficients[4]
summary(m3)$coefficients[1] + .03* summary(m3)$coefficients[2] + 14*summary(m3)$coefficients[3] + (.03*14)*summary(m3)$coefficients[4]
lexp <- function()
{   y <- -736527910 + 620060216 * (x)
y <- y^(1/4.6)
print(y)
}
#Life expectancy when TotExp^.06 =1.5
lexp(1.5)
le <- function()
{   y <- -736527910 + 620060216 * (x)
y <- y^(1/4.6)
print(y)
}
#Life expectancy when TotExp^.06 =1.5
le(1.5)
life_exp <- function(x)
{   y <- -736527910 + 620060216 * (x)
y <- y^(1/4.6)
print(y)
}
#Life expectancy when TotExp^.06 =1.5
life_exp(1.5)
#Life expectancy when TotExp^.06 =2.5
life_exp(2.5)
setwd("E:/github/MS/DATA606/Data606")
library(DATA606)
startLab('Lab9')
#### Ans)
15. Using backward-selection and p-value as the selection criterion,
determine the best model. You do not need to show all steps in your
answer, just the output for the final model. Also, write out the linear
model for predicting score based on the final model you settle on.
qplot(x = score, data = evals, binwidth = 0.1)
load("more/evals.RData")
qplot(x = score, data = evals, binwidth = 0.1)
plot(x = evals$age, y = evals$bty_avg)
boxplot(evals$bty_avg ~ evals$age)
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = blues9)
boxplot(evals$bty_avg ~ evals$age)
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = blue)
plot(x = evals$age, y = evals$bty_avg, col = blues)
plot(x = evals$age, y = evals$bty_avg, col = blues9)
boxplot(evals$bty_avg ~ evals$age)
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = "blue")
boxplot(evals$bty_avg ~ evals$age)
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = "green")
boxplot(evals$bty_avg ~ evals$age)
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = "darkgreen")
boxplot(evals$bty_avg ~ evals$age)
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = "darkgreen")
boxplot(evals$bty_avg ~ evals$age, col = "blue")
mosaicplot(~ age + bty_avg , data = evals, color = TRUE)
plot(x = evals$age, y = evals$bty_avg, col = "darkgreen")
boxplot(evals$bty_avg ~ evals$age, col = "blue")
mosaicplot(~ age + bty_avg , data = evals, color = "red")
setwd("E:/github/MS/DATA606/Data606")
# plot between reponse and predictor1
ggplot(data = input, aes(x = disp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor2
ggplot(data = input, aes(x = hp, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
# plot between reponse and predictor3
ggplot(data = input, aes(x = wt, y = mpg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = evals, aes(x = age, y = bty_avg)) +  geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
boxplot(evals$bty_avg ~ evals$age, col = "blue")
mosaicplot(~ age + bty_avg , data = evals, color = "red")
scoreNoise <- jitter(evals$score, factor = 1, amount = NULL)
plot(scoreNoise ~ evals$bty_avg)
plot(jitter(evals$score) ~ evals$bty_avg)
ggplot(evals, aes(bty_avg, score)) + geom_point(position = position_jitter(w = 0.3, h = 0.3)) + ylab("score") + xlab("beauty average")
m_bty <- lm(evals$score ~ evals$bty_avg)
summary(m_bty)
plot(evals$score ~ evals$bty_avg)
abline(m_bty)
# residual plot
ggplot(model, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# normal plot
qqnorm(resid(model))
qqline(resid(model))
# residual plot
ggplot(evals, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# residual plot
library(ggplot2)
ggplot(evals, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# residual plot
# normal plot
qqnorm(resid(evals))
# residual plot
# normal plot
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)
# residual plot
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0)
# normal plot
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)
qplot(x = score, data = evals, binwidth = 0.1)
library(ggplot2)
library(dplyr)
qplot(x = score, data = evals, binwidth = 0.1)
ggplot(evals, aes(bty_avg, score)) + geom_point(position = position_jitter(w = 0.3, h = 0.3)) + ylab("score") + xlab("beauty average")
ggplot(evals, aes(bty_avg, score)) + geom_point(position = position_jitter(w = 0.3, h = 0.3)) + ylab("score") + xlab("beauty average")
qplot(x = .fitted, y = .stdresid, data = m_bty_gen, position = "jitter")
library(ggplot2)
library(dplyr)
qplot(x = score, data = evals, binwidth = 0.1)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
qqnorm(m_bty_gen$residuals)
qqline(m_bty_gen$residuals)
# residual plot
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0)
# normal plot
qqnorm(m_bty$residuals)
qqline(m_bty$residuals)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
# residual plot
ggplot(m_bty_gen, aes(.fitted, .resid)) + geom_point(color = "darkgreen", size=2) +labs(title = "Fitted Values vs Residuals") +labs(x = "Fitted Values") +labs(y = "Residuals")
# q-q plot
qqnorm(m_bty_gen$residuals)
qqline(m_bty_gen$residuals)
multiLines(m_bty_gen)
summary(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
summary(m_full)
m_full2 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full2)
m_full3 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full3)
qqnorm(m_full3$residuals)
qqline(m_full3$residuals)
m_full3 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_credits + bty_avg + pic_outfit + pic_color, data = evals)
summary(m_full3)
