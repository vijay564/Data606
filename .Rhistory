print("CalCULATING INVERSE OF MATRIX")
detM <- det(M)
C <- matrix(0, nrow = nrow(M), ncol = ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[j,i] = (-1)^(i+j)*det(M[-i,-j])
}
}
invM = C/detM
}#if
else{
print("Invalid Input")
}
return(invM)
myinverse <- function(M){
if(is.matrix(M) & nrow(M) == ncol(M) & det(M) != 0){
print("CalCULATING INVERSE OF MATRIX")
detM <- det(M)
C <- matrix(0, nrow = nrow(M), ncol = ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[j,i] = (-1)^(i+j)*det(M[-i,-j])
}
}
invM = C/detM
}#if
else{
print("Invalid Input")
}
return(invM)
}
myinverse <- function(M){
if(is.matrix(M) & nrow(M) == ncol(M) & det(M) != 0){
print("CalCULATING INVERSE OF MATRIX")
detM <- det(M)
C <- matrix(0, nrow = nrow(M), ncol = ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[j,i] = (-1)^(i+j)*det(M[-i,-j])
}
}
invM = C/detM
}#if
else{
print("Invalid Input")
}
return(invM)
}
(A <- matrix(c(3, 2, 0, 0, 9, 1, 2, -2,8), 3,3))
(B<- myinverse(A))
myinverse <- function(V){
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
detV <- det(V)
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}#if
else{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(3, 2, 0, 0, 9, 1, 2, -2,8), 3,3))
(B<- myinverse(A))
else{
print("Invalid Input")
}
{
print("Invalid Input")
}
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
detV <- det(V)
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}else
{
print("Invalid Input")
}
return(inverse)
}
{
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}else
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0)
{
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
inverse = C/detV
}else
{
print("Invalid Input")
}
return(inverse)
}
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(3, 2, 0, 0, 9, 1, 2, -2), 3,3))
(A <- matrix(c(3,2,0,0,9,4), 3,2))
(B<- myinverse(A))
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[j,i] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = C/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
I<- A%*%B
(I<- A%*%B)
round(I<- A%*%B,0)
#
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
#
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
round(I<- A%*%B,0)
else
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
(B<- myinverse(A))
I<- A%*%B
(I<- A%*%B)
round(I,0)
round(I,2)
(I<- A%*%B)
round(I,2)
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
#CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
#CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
#DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
#USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
#CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
#IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
(X <-(A)%*%t(A))
(Y<- t(A)%*%(A))
# COMPUTING EIGEN VALUES AND EIGEN VECTORS OF 'X' AND 'Y' :
(E_X <- eigen(X))
(E_Y<- eigen(Y))
# COMPUTE LEFT SINGULAR, SINGULAR, RIGHT SINGULAR OF 'A' USING "SVD" FUNCTION :
(left_singular_A <- svd(A)$u)
(singular_A <- svd(A)$d)
(right_singular_A <- svd(A)$v)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
exp(-5)
(lambda <- 10000/2000)
exp(-5)
knitr::opts_chunk$set(echo = TRUE)
library(matrixcalc)
markov <- function(u, P, n){
matrixPower <- matrix.power(P, n)
result <- u %*%matrixPower
return(result)
}
u <- c(1/3, 1/3, 1/3)
oz <- c(.5, .25, .25, .5,  0, .5, .25, .25, .5)
P <- matrix(oz, nrow = 3, ncol = 3, byrow = T)
markov(u, P, 10)
ggplot(mlb11, aes(x = at_bats, y = runs, color = team)) +
geom_point()
load("more/mlb11.RData")
setwd("E:/github/MS/DATA606/Data606")
setwd("E:/github/MS/DATA606/Data606/Lab7")
setwd("E:/github/MS/DATA606/Data606")
library(DATA606)
startLab('Lab8')
load("more/mlb11.RData")
ggplot(mlb11, aes(x = at_bats, y = runs, color = team)) +
geom_point()
plot_ss(x = mlb11$at_bats, y = mlb11$runs, leastSquares = TRUE)
homeruns_model <- lm(formula = runs ~ homeruns, data = mlb11)
#Writing the details from the model
summary(homeruns_model)
y_predict <- -2789.2429 + (0.6305 * 5578)
y_predict
(Y_predict <- -2789.2429 + (0.6305 * 5578))
ggplot(mlb11, aes(x = at_bats, y = runs, color = team)) +
geom_point()
library(tidyverse)
library(magrittr)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
plot(mlb11$hits,mlb11$runs, xlab = 'Hits', ylab = 'Runs')
#hits
hits = lm(runs ~ hits, data = mlb11)
plot(mlb11$hits,mlb11$runs, xlab = 'Hits', ylab = 'Runs')
abline(hits)
summary(m1)
hist(m1$residuals)
plot(m1$residuals ~ mlb11$at_bats)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
summary(m1)
summary(m1)
library(tidyverse)
library(magrittr)
load("more/mlb11.RData")
ggplot(mlb11, aes(x = at_bats, y = runs, color = team)) +
geom_point()
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, leastSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
(Y_predict <- -2789.2429 + (0.6305 * 5578))
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
plot(mlb11$hits,mlb11$runs, xlab = 'Hits', ylab = 'Runs')
#hits
hits = lm(runs ~ hits, data = mlb11)
plot(mlb11$hits,mlb11$runs, xlab = 'Hits', ylab = 'Runs')
abline(hits)
setwd("E:/github/MS/DATA606/Data606")
bat_avg <- lm(mlb11$runs ~  mlb11$bat_avg )
summary(bat_avg)
#graph
plot(mlb11$bat_avg, mlb11$runs, xlab = 'Batting Average', ylab= 'Runs')
abline(bat_avg, col = 'blue')
hist(resid(bat_avg))
plot(mlb11$bat_avg, resid(bat_avg))
abline(h = 0, lty = 3)
qqnorm(resid(bat_avg))
qqline(resid(bat_avg))
new_obs <- lm(mlb11$runs ~  mlb11$new_obs)
summary(new_obs)
setwd("E:/github/MS/DATA606/Data606")
